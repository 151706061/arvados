#!/bin/sh

set -e

INSTALL_PATH=/var/www/arvados-sso
RELEASE_PATH=$INSTALL_PATH/current
SHARED_PATH=$INSTALL_PATH/shared
CONFIG_PATH=/etc/arvados/sso

VERSION=`cat $RELEASE_PATH/git-commit.version`

setup_ruby_environment() {
  if [ -s "$HOME/.rvm/scripts/rvm" ] ; then
    using_rvm="true"
  elif [ -s "/usr/local/rvm/scripts/rvm" ] ; then
    using_rvm="true"
  else
    using_rvm="false"
  fi

  if [ "$using_rvm" = "true" ]; then
    COMMAND_PREFIX="/usr/local/rvm/bin/rvm-exec default"
  else
    COMMAND_PREFIX=
  fi
}

# arguments: <major version> <most recently configured package version>
configure_version() {
  VERSION="$1"

  [ "$VERSION" ] || { echo "Error: configure_version: need version parameter" >&2; exit 1; }

  WEB_SERVICE=${WEB_SERVICE:-$(service --status-all 2>/dev/null \
      | grep -Eo '\bnginx|httpd[^[:space:]]*' || true)}
  if [ -z "$WEB_SERVICE" ]; then
    cat >&2 <<EOF

Warning: web service (Nginx or Apache) not found.

To override, set the WEB_SERVICE environment variable to the name of the service
hosting the Rails server. Alternativey, install nginx.

For Debian-based systems, then reconfigure this package with dpkg-reconfigure.

For RPM-based systems, then reinstall this package.

EOF
  elif [ "$WEB_SERVICE" != "$(echo "$WEB_SERVICE" | head -n 1)" ]; then
    WEB_SERVICE=$(echo "$WEB_SERVICE" | head -n 1)
    cat >&2 <<EOF
Warning: multiple web services found. Choosing the first one ($WEB_SERVICE).

To override, set the WEB_SERVICE environment variable to the name of the service
hosting the Rails server.

For Debian-based systems, then reconfigure this package with dpkg-reconfigure.

For RPM-based systems, then reinstall this package.

EOF
  fi

  if [ -e /etc/redhat-release ]; then
      if [ "$WEB_SERVICE" = "nginx" ]; then
        WWW_OWNER=nginx:nginx
      else
        WWW_OWNER=apache:apache
      fi
  else
      # Assume we're on a Debian-based system for now.
      # Both Apache and Nginx run as www-data by default.
      WWW_OWNER=www-data:www-data
  fi

  echo
  echo "Assumption: $WEB_SERVICE is configured to serve your SSO server URL from"
  echo "            /var/www/arvados-sso/current"
  echo "Assumption: configuration files are in /etc/arvados/sso/"
  echo "Assumption: $WEB_SERVICE and passenger run as $WWW_OWNER"
  echo

  echo -n "Symlinking files from $CONFIG_PATH ..."

  if [ ! -h $RELEASE_PATH/config/database.yml ]; then
    ln -s $CONFIG_PATH/database.yml $RELEASE_PATH/config/database.yml
  fi
  if [ ! -h $RELEASE_PATH/config/environments/production.rb ]; then
    if [ ! -f $CONFIG_PATH/production.rb ]; then
      cp $RELEASE_PATH/config/environments/production.rb.example $CONFIG_PATH/production.rb
    fi
    ln -s $CONFIG_PATH/production.rb $RELEASE_PATH/config/environments/production.rb
  fi
  if [ ! -h $RELEASE_PATH/config/application.yml ]; then
    ln -s $CONFIG_PATH/application.yml $RELEASE_PATH/config/application.yml
  fi
  echo "... done."

  # Before we do anything else, make sure some directories and files are in place
  if [ ! -e $SHARED_PATH/log ]; then mkdir -p $SHARED_PATH/log; fi
  if [ ! -e $RELEASE_PATH/tmp ]; then mkdir -p $RELEASE_PATH/tmp; fi
  if [ ! -e $RELEASE_PATH/log ]; then ln -s $SHARED_PATH/log $RELEASE_PATH/log; fi
  if [ ! -e $SHARED_PATH/log/production.log ]; then touch $SHARED_PATH/log/production.log; fi

  cd "$RELEASE_PATH"
  export RAILS_ENV=production

  echo -n "Running bundle install ..."
  $COMMAND_PREFIX bundle install --path $SHARED_PATH/vendor_bundle --quiet || exit $?
  echo "... done."

  echo -n "Ensuring directory and file permissions ..."
  # Ensure correct ownership of a few files
  chown "$WWW_OWNER" $RELEASE_PATH/config/environment.rb
  chown "$WWW_OWNER" $RELEASE_PATH/config.ru
  chown "$WWW_OWNER" $RELEASE_PATH/config/database.yml
  chown "$WWW_OWNER" $RELEASE_PATH/Gemfile.lock
  chown -R "$WWW_OWNER" $RELEASE_PATH/tmp
  chown -R "$WWW_OWNER" $SHARED_PATH/log
  chown "$WWW_OWNER" $RELEASE_PATH/db/schema.rb
  chmod 644 $SHARED_PATH/log/*
  echo "... done."

  set +e
  DB_MIGRATE_STATUS=`$COMMAND_PREFIX bundle exec rake db:migrate:status 2>/dev/null`
  DB_MIGRATE_STATUS_CODE=$?
  set -e

  if echo $DB_MIGRATE_STATUS | grep 'Schema migrations table does not exist yet.' >/dev/null; then
    # The database exists, but the migrations table doesn't.
    echo -n "Setting up database ..."
    $COMMAND_PREFIX bundle exec rake db:schema:load db:seed || exit $?
  elif echo $DB_MIGRATE_STATUS | grep '^database: ' >/dev/null; then
    echo -n "Running db:migrate ..."
    $COMMAND_PREFIX bundle exec rake db:migrate || exit $?
  else
    echo "Error: Database is not ready to set up. Aborting." >&2
    exit 1
  fi
  echo "... done."

  echo -n "Precompiling assets ..."
  # precompile assets; thankfully this does not take long
  $COMMAND_PREFIX bundle exec rake assets:precompile -q -s || exit $?
  chown -R "$WWW_OWNER" $RELEASE_PATH/tmp
  echo "... done."

  if [ ! -z "$WEB_SERVICE" ]; then
    echo -n "Restarting $WEB_SERVICE ..."
    service "$WEB_SERVICE" restart || exit $?
    echo "... done."
  fi

  echo
}

if [ "$1" = configure ]; then
  # This is a debian-based system
  setup_ruby_environment
  configure_version $VERSION "$2"
elif [ "$1" = "0" ] || [ "$1" = "1" ] || [ "$1" = "2" ]; then
  # This is an rpm-based system
  setup_ruby_environment
  configure_version $VERSION
fi
