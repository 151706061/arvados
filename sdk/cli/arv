#!/usr/bin/env ruby

# Arvados cli client
#
# Ward Vandewege <ward@clinicalfuture.com>

if RUBY_VERSION < '1.9.3' then
  abort <<-EOS
#{$0.gsub(/^\.\//,'')} requires Ruby version 1.9.3 or higher.
  EOS
end

ENV['ARVADOS_API_VERSION'] ||= 'v1'

if not ENV.include?('ARVADOS_API_HOST') or not ENV.include?('ARVADOS_API_TOKEN') then
  abort <<-EOS
ARVADOS_API_HOST and ARVADOS_API_TOKEN need to be defined as environment variables.
  EOS
end

begin
  require 'rubygems'
  require 'google/api_client'
  require 'json'
  require 'pp'
  require 'trollop'
  require 'andand'
  require 'oj'
rescue LoadError
  abort <<-EOS

Please install all required gems: 

  google-api-client
  json
  trollop
  andand
  oj

  EOS
end

module Kernel
  def suppress_warnings
    original_verbosity = $VERBOSE
    $VERBOSE = nil
    result = yield
    $VERBOSE = original_verbosity
    return result
  end
end

# do this if you're testing with a dev server and you don't care about SSL certificate checks:
if ENV['ARVADOS_API_HOST_INSECURE']
  suppress_warnings { OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE }
end

class Google::APIClient
 def discovery_document(api, version)
  api = api.to_s
  return @discovery_documents["#{api}:#{version}"] ||= (begin
    response = self.execute!(
      :http_method => :get,
      :uri => self.discovery_uri(api, version),
      :authenticated => false
    )
    response.body.class == String ? JSON.parse(response.body) : response.body
  end)
 end
end

client = Google::APIClient.new(:host => ENV['ARVADOS_API_HOST'], :application_name => 'arvados-cli', :application_version => '1.0')
arvados = client.discovered_api('arvados', ENV['ARVADOS_API_VERSION'])

def to_boolean(s)
  !!(s =~ /^(true|t|yes|y|1)$/i)
end

def parse_arguments(discovery_document)
  resource_types = Array.new()
  resource_types << '--help'
  discovery_document["resources"].each do |k,v|
    resource_types << k.singularize
  end

  global_opts = Trollop::options do
    banner "arvados cli client"
    opt :dry_run, "Don't actually do anything", :short => "-n"
    opt :verbose, "Print some things on stderr", :short => "-v"
    opt :uuid, "Return the UUIDs of the objects in the response, one per line (default)", :short => nil
    opt :json, "Return the entire response received from the API server, as a JSON object", :short => "-j"
    opt :human, "Return the response received from the API server, as a JSON object with whitespace added for human consumption", :short => "-h"
    opt :pretty, "Synonym of --human", :short => nil
    stop_on resource_types
  end
  
  # get the subcommand
  resource_arg = ARGV.shift
  if resource_types.include?(resource_arg) and resource_arg != '--help' then
    # subcommand exists
    # Now see if the method supplied exists
    method = ARGV.shift
    if discovery_document["resources"][resource_arg.pluralize]["methods"].include?(method) then
      # method exists. Collect arguments.
      discovered_params = discovery_document["resources"][resource_arg.pluralize]["methods"][method]["parameters"]
      method_opts = Trollop::options do
        discovered_params.each do |k,v|
          opts = Hash.new()
          opts[:type] = v["type"].to_sym if v.include?("type")
          if [:datetime, :text, :object].index opts[:type]
            opts[:type] = :string                       # else trollop bork
          end
          opts[:default] = v["default"] if v.include?("default")
          opts[:default] = v["default"].to_i if opts[:type] == :integer
          opts[:default] = to_boolean(v["default"]) if opts[:type] == :boolean
          opts[:required] = true if v.include?("required") and v["required"]
          description = ''
          description = '  ' + v["description"] if v.include?("description")
          opt k.to_sym, description, opts
        end
      end
      discovered_params.each do |k,v|
        if v["type"] == "object" and method_opts.has_key? k
          method_opts[k] = JSON.parse method_opts[k]
        end
      end
    else
      banner = "\nThis resource type supports the following methods:\n\n"
      discovery_document["resources"][resource_arg.pluralize]["methods"].each do |k,v|
        description = ''
        description = '  ' + v["description"] if v.include?("description")
        banner += "   #{sprintf("%20s",k)}#{description}\n"
      end
      banner += "\n"

      STDERR.puts banner
  
      if not method.nil? and method != '--help' then 
        Trollop::die "Unknown method #{method.to_s} for command #{resource_arg.to_s}"
      else
        exit 255
      end

    end
    
  else
    banner = "\nThis Arvados instance supports the following resource types:\n\n"
    discovery_document["resources"].each do |k,v|
      description = ''
      if discovery_document["schemas"].include?(k.singularize.capitalize) and 
         discovery_document["schemas"][k.singularize.capitalize].include?('description') then
        description = '  ' + discovery_document["schemas"][k.singularize.capitalize]["description"]
      end
      banner += "   #{sprintf("%30s",k.singularize)}#{description}\n"
    end
    banner += "\n"

    STDERR.puts banner

    if not resource_arg.nil? and resource_arg != '--help' then 
      Trollop::die "Unknown resource type #{resource_arg.inspect}"
    else
      exit 255
    end
  end

  return resource_arg.pluralize, method, method_opts, global_opts, ARGV
end

controller, method, method_opts, global_opts, remaining_opts = parse_arguments(arvados.discovery_document)

api_method = 'arvados.' + controller + '.' + method

if global_opts[:dry_run]
  if global_opts[:verbose]
    $stderr.puts "#{api_method} #{method_opts.inspect}"
  end
  exit
end

result = client.execute :api_method => eval(api_method), :parameters => { :api_token => ENV['ARVADOS_API_TOKEN'] }.merge(method_opts), :authenticated => false
results = JSON.parse result.body

if results["errors"] then
  abort "Error: #{results["errors"][0]}"
end

if global_opts[:human] or global_opts[:pretty] then
  puts Oj.dump(results, :indent => 1)
elsif global_opts[:json] then
  puts Oj.dump(results)
elsif results["items"] and results["kind"].match /list$/i
  results['items'].each do |i| puts i['uuid'] end
else
  puts results['uuid']
end
