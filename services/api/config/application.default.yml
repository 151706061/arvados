# Do not use this file for site configuration. Create application.yml
# instead (see application.yml.example).

development:
  force_ssl: false
  cache_classes: false
  whiny_nils: true
  consider_all_requests_local: true
  action_controller.perform_caching: false
  action_mailer.raise_delivery_errors: false
  action_mailer.perform_deliveries: false
  active_support.deprecation: :log
  action_dispatch.best_standards_support: :builtin
  active_record.mass_assignment_sanitizer: :strict
  active_record.auto_explain_threshold_in_seconds: 0.5
  assets.compress: false
  assets.debug: true

production:
  force_ssl: true
  cache_classes: true
  consider_all_requests_local: false
  action_controller.perform_caching: true
  serve_static_assets: false
  assets.compress: true
  assets.compile: false
  assets.digest: true

test:
  force_ssl: false
  cache_classes: true
  serve_static_assets: true
  static_cache_control: public, max-age=3600
  whiny_nils: true
  consider_all_requests_local: true
  action_controller.perform_caching: false
  action_dispatch.show_exceptions: false
  action_controller.allow_forgery_protection: false
  action_mailer.delivery_method: :test
  active_support.deprecation: :stderr
  active_record.mass_assignment_sanitizer: :strict
  uuid_prefix: zzzzz
  secret_token: <%= rand(2**512).to_s(36) %>
  blob_signing_key: <%= rand(2**512).to_s(36) %>

common:
  uuid_prefix: <%= Digest::MD5.hexdigest(`hostname`).to_i(16).to_s(36)[0..4] %>

  # Git repositories must be readable by api server, or you won't be
  # able to submit crunch jobs. To pass the test suites, put a clone
  # of the arvados tree in {git_repositories_dir}/arvados.git or
  # {git_repositories_dir}/arvados/.git
  git_repositories_dir: /var/lib/arvados/git

  # This is a (bare) repository that stores commits used in jobs.  When a job
  # runs, the source commits are first fetched into this repository, then this
  # repository is used to deploy to compute nodes.  This should NOT be a
  # subdirectory of {git_repositiories_dir}.
  git_internal_dir: /var/lib/arvados/internal.git

  # :none or :slurm_immediate
  crunch_job_wrapper: :none

  # username, or false = do not set uid when running jobs.
  crunch_job_user: crunch

  # The web service must be able to create/write this file, and
  # crunch-job must be able to stat() it.
  crunch_refresh_trigger: /tmp/crunch_refresh_trigger

  # Maximum number of log events that may be generated by a single job.
  crunch_limit_log_events_per_job: 65536

  # Maximum number of total bytes that may be logged by a single job.
  crunch_limit_log_event_bytes_per_job: 67108864

  # These two settings control how frequently log events are flushed
  # to the database.  If a job generates two or more events within
  # crunch_log_seconds_between_events, the log data is not flushed
  # until crunch_log_bytes_per_event has been reached.
  crunch_log_bytes_per_event: 4096
  crunch_log_seconds_between_events: 1

  # Path to /etc/dnsmasq.d, or false = do not update dnsmasq data.
  dnsmasq_conf_dir: false

  # Set to AMI id (ami-123456) to auto-start nodes. See app/models/node.rb
  compute_node_ami: false
  compute_node_ec2run_args: -g arvados-compute
  compute_node_spot_bid: 0.11

  compute_node_domain: false
  compute_node_nameservers:
    - 192.168.1.1
  compute_node_ec2_tag_enable: false

  # The version below is suitable for AWS.
  # To use it, copy it to your application.yml, uncomment, and change <%# to <%=
  # compute_node_nameservers: <%#
  #   require 'net/http'
  #   ['local', 'public'].collect do |iface|
  #     Net::HTTP.get(URI("http://169.254.169.254/latest/meta-data/#{iface}-ipv4")).match(/^[\d\.]+$/)[0]
  #   end << '172.16.0.23'
  # %>

  accept_api_token: {}

  new_users_are_active: false
  admin_notifier_email_from: arvados@example.com
  email_subject_prefix: "[ARVADOS] "
  user_notifier_email_from: arvados@example.com
  new_user_notification_recipients: [ ]
  new_inactive_user_notification_recipients: [ ]

  # Visitors to the API server will be redirected to the workbench
  workbench_address: https://workbench.local:3001/

  # The e-mail address of the user you would like to become marked as an admin
  # user on their first login.
  # In the default configuration, authentication happens through the Arvados SSO
  # server, which uses openid against Google's servers, so in that case this
  # should be an address associated with a Google account.
  auto_admin_user: false

  ## Set Time.zone default to the specified zone and make Active
  ## Record auto-convert to this zone.  Run "rake -D time" for a list
  ## of tasks for finding time zone names. Default is UTC.
  #time_zone: Central Time (US & Canada)

  ## Default encoding used in templates for Ruby 1.9.
  encoding: utf-8

  # Enable the asset pipeline
  assets.enabled: true

  # Version of your assets, change this if you want to expire all your assets
  assets.version: "1.0"

  arvados_theme: default

  # Default: do not advertise a websocket server.
  websocket_address: false

  # You can run the websocket server separately from the regular HTTP service
  # by setting "ARVADOS_WEBSOCKETS=ws-only" in the environment before running
  # the websocket server.  When you do this, you need to set the following
  # configuration variable so that the primary server can give out the correct
  # address of the dedicated websocket server:
  #websocket_address: wss://127.0.0.1:3333/websocket

  # blob_signing_key is a string of alphanumeric characters used to
  # generate permission signatures for Keep locators. It must be
  # identical to the permission key given to Keep. IMPORTANT: This is
  # a site secret. It should be at least 50 characters.
  blob_signing_key: ~

  # Amount of time (in seconds) for which a blob permission signature
  # remains valid.  Default: 2 weeks (1209600 seconds)
  blob_signing_ttl: 1209600

  # Allow clients to create collections by providing a manifest with
  # unsigned data blob locators. IMPORTANT: This effectively disables
  # access controls for data stored in Keep: a client who knows a hash
  # can write a manifest that references the hash, pass it to
  # collections.create (which will create a permission link), use
  # collections.get to obtain a signature for that data locator, and
  # use that signed locator to retrieve the data from Keep. Therefore,
  # do not turn this on if your users expect to keep data private from
  # one another!
  permit_create_collection_with_unsigned_manifest: false

  # secret_token is a string of alphanumeric characters used by Rails
  # to sign session tokens. IMPORTANT: This is a site secret. It
  # should be at least 50 characters.
  secret_token: ~
