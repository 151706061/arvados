<%
  input_uuids = []
  input_pdhs = []
  @object.components.each do |k, component|
    next if !component
    component[:script_parameters].andand.each do |p, tv|
      if tv[:value] and tv[:dataclass].andand.eql?('Collection')
        if CollectionsHelper.match(tv[:value])
          input_pdhs << tv[:value]
        else
          input_uuids << tv[:value]
        end
      end
    end
  end

  preload_collections_for_objects input_uuids if input_uuids.any?
  preload_for_pdhs input_pdhs if input_pdhs.any?
%>

<table class="table pipeline-components-table" style="margin-top: -.1em">
  <colgroup>
    <col style="width: 20%" />
    <col style="width: 20%" />
    <col style="width: 20%" />
    <col style="width: 40%" />
  </colgroup>

  <thead>
    <tr>
      <th>
        component
      </th><th>
        script
      </th><th>
        parameter
      </th><th>
        value
      </th>
    </tr>
  </thead>
  <tbody>
    <% @object.components.each do |k, component| %>
      <% next if !component %>
      <tr>
        <td><%= k %></td>

        <td><%= component[:script] %></td>

        <td>script version</td>

        <td>
          <%= render_pipeline_component_attribute (editable && @object), :components, [k, :script_version], component[:script_version] %>
        </td>
      </tr>

      <% component[:script_parameters].andand.each do |p, tv| %>
        <tr>
          <td style="border-top: none"></td>
          <td style="border-top: none"></td>

          <td class="property-edit-row"><%= p %></td>
          <td class="property-edit-row"><%= render_pipeline_component_attribute (editable && @object), :components, [k, :script_parameters, p.to_sym], tv %></td>
        </tr>
      <% end %>
    <% end %>
  </tbody>
</table>
