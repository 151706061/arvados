<%# Summary %>

<% if @object.state == 'Paused' %>
  <p>
    This pipeline is paused.  Jobs that are
    already running will continue to run, but no new jobs will be submitted.
  </p>
<% end %>

<% tasks = JobTask.filter([['job_uuid', 'in', render_pipeline_jobs.map { |j| j[:job].andand[:uuid] }]]).results %>
<% runningtime = determine_wallclock_runtime(render_pipeline_jobs.map {|j| j[:job]}) %>

<p>
  <% if @object.started_at %>
    This pipeline started at <span data-utc-date="<%= @object.started_at %>"><%= @object.started_at %></span>.
    It 
    <% if @object.state == 'Complete' %>
      completed in
    <% elsif @object.state == 'Failed' %>
      failed after
    <% else %>
      has been active for
    <% end %>

    <% walltime = if @object.finished_at then
                    @object.finished_at - @object.started_at
                  else
                    Time.now - @object.started_at
                  end %>
    
    <%= if walltime > runningtime 
          render_runtime(walltime, true) 
        else 
          render_runtime(runningtime, true) 
        end %><% if @object.finished_at %> at <span data-utc-date="<%= @object.finished_at %>"><%= @object.finished_at %></span><% end %>.
    <% else %>
      This pipeline is <%= if @object.state.start_with? 'Running' then 'active' else @object.state.downcase end %>.
        <% walltime = 0%>
    <% end %>

  <% if @object.state == 'Failed' %>
    Check the Log tab for more detail about why this pipeline failed.
  <% end %>
</p>

<p>
    This pipeline
    <% if @object.state.start_with? 'Running' %>
      has run
    <% else %>
      ran
    <% end %>
    for
    <% cputime = tasks.map { |task|
         if task.started_at
           (if task.finished_at then task.finished_at else Time.now() end) - task.started_at
           else
         0
       end
       }.reduce(:+) || 0 %>
    <%= render_runtime(runningtime, true, false) %><% if walltime - runningtime > 0 %>
      (<%= render_runtime(walltime - runningtime, true) %> queued)<% end %><% if cputime == 0 %>.<% else %>
      and used
    <%= render_runtime(cputime, true) %>
    of CPU time (<%= (cputime/runningtime).round(1) %>&Cross; scaling).
    <% end %>
</p>

<%# Components %>

<% render_pipeline_jobs.each_with_index do |pj, i| %>
  <%= render partial: 'running_component', locals: {tasks: tasks, pj: pj, i: i, expanded: false} %>
<% end %>
