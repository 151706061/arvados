---
layout: default
navsection: installguide
title: Install the Single Sign On (SSO) server
...

h2(#dependencies). Install prerequisites

The Arvados package repository includes an SSO server package that can help automate much of the deployment.

h3(#install_ruby_and_bundler). Install Ruby and Bundler

{% include 'install_ruby_and_bundler' %}

h3(#install_web_server). Set up a Web server

For best performance, we recommend you use Nginx as your Web server frontend with a Passenger backend to serve the SSO server. The Passenger team provides "Nginx + Passenger installation instructions":https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/ownserver/nginx/oss/install_passenger_main.html.

Follow the instructions until you see the section that says you are ready to deploy your Ruby application on the production server.

h2(#install). Install the SSO server

On a Debian-based system, install the following package:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install arvados-sso-server</span>
</code></pre>
</notextile>

On a Red Hat-based system, install the following package:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install arvados-sso-server</span>
</code></pre>
</notextile>

h2(#configure). Configure the SSO server

The package has installed three configuration files in @/etc/arvados/sso@:

<notextile>
<pre><code>/etc/arvados/sso/application.yml
/etc/arvados/sso/database.yml
/etc/arvados/sso/production.rb
</code></pre>
</notextile>

The SSO server runs from the @/var/www/arvados-sso/current/@ directory. The files @/var/www/arvados-sso/current/config/application.yml@, @/var/www/arvados-sso/current/config/database.yml@ and @/var/www/arvados-sso/current/config/environments/production.rb@ are symlinked to the configuration files in @/etc/arvados/sso/@.

The SSO server reads the @config/application.yml@ file, as well as the @config/application.defaults.yml@ file. Values in @config/application.yml@ take precedence over the defaults that are defined in @config/application.defaults.yml@. The @config/application.yml.example@ file is not read by the SSO server and is provided for installation convenience only.

Consult @config/application.default.yml@ for a full list of configuration options.  Local configuration goes in @/etc/arvados/sso/application.yml@, do not edit @config/application.default.yml@.

h3(#uuid_prefix). uuid_prefix

Generate a uuid prefix for the single sign on service.  This prefix is used to identify user records as originating from this site.  It must be exactly 5 lowercase ASCII letters and/or digits.  You may use the following snippet to generate a uuid prefix:

<notextile>
<pre><code>~$ <span class="userinput">ruby -e 'puts "#{rand(2**64).to_s(36)[0,5]}"'</span>
abcde
</code></pre></notextile>

Edit @/etc/arvados/sso/application.yml@ and set @uuid_prefix@ in the "common" section.

h3(#secret_token). secret_token

Generate a new secret token for signing cookies:

<notextile>
<pre><code>~$ <span class="userinput">ruby -e 'puts rand(2**400).to_s(36)'</span>
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
</code></pre></notextile>

Edit @/etc/arvados/sso/application.yml@ and set @secret_token@ in the "common" section.

There are other configuration options in @/etc/arvados/sso/application.yml@. See the "Authentication methods":install-sso.html#authentication_methods section below for more details.

h2(#database). Set up the database

If PostgreSQL was newly installed as a dependency of the @arvados-sso-server@ package, you will need to start the service.

On a Debian-based system:

<notextile>
<pre><code>~$ <span class="userinput">sudo service postgresql start</span>
</code></pre>
</notextile>

On a Red Hat-based system, we also need to initialize the database system:

<notextile>
<pre><code>~$ <span class="userinput">sudo service postgresql initdb</span>
~$ <span class="userinput">sudo service postgresql start</span>
</code></pre>
</notextile>

{% include 'notebox_begin' %}

If you are installing on CentOS6, you will need to modify PostgreSQL's configuration to allow password authentication for local users. The default configuration allows 'ident' only. The following commands will make the configuration change, and restart PostgreSQL for it to take effect.
<br/>
<notextile>
<pre><code>~$ <span class="userinput">sudo sed -i -e "s/127.0.0.1\/32          ident/127.0.0.1\/32          md5/" /var/lib/pgsql/data/pg_hba.conf</span>
~$ <span class="userinput">sudo sed -i -e "s/::1\/128               ident/::1\/128               md5/" /var/lib/pgsql/data/pg_hba.conf</span>
~$ <span class="userinput">sudo service postgresql restart</span>
</code></pre>
</notextile>
{% include 'notebox_end' %}


Next, generate a new database password. Nobody ever needs to memorize it or type it, so make a strong one:

<notextile>
<pre><code>~$ <span class="userinput">ruby -e 'puts rand(2**128).to_s(36)'</span>
abcdefghijklmnopqrstuvwxyz012345689
</code></pre></notextile>

Configure the SSO server to connect to your database by updating @/etc/arvados/sso/database.yml@. Replace the @xxxxxxxx@ database password placeholder with the new password you generated above. Be sure to update the @production@ section.

<notextile>
<pre><code>~$ <span class="userinput">editor /etc/arvados/sso/database.yml</span>
</code></pre></notextile>

Create a new database user with permission to create its own databases.

<notextile>
<pre><code>~$ <span class="userinput">sudo -u postgres createuser --createdb --encrypted -R -S --pwprompt arvados_sso</span>
Enter password for new role: <span class="userinput">paste-database-password-you-generated</span>
Enter it again: <span class="userinput">paste-database-password-you-generated</span>
</code></pre></notextile>

Rails will take care of creating the database, based on the information from @/etc/arvados/sso/database.yml@. 

Alternatively, if the database user you intend to use for the SSO server should not be allowed to create new databases, the user and the database can be created like this:

<notextile>
<pre><code>~$ <span class="userinput">sudo -u postgres createuser --encrypted -R -S --pwprompt arvados_sso</span>
Enter password for new role: <span class="userinput">paste-database-password-you-generated</span>
Enter it again: <span class="userinput">paste-database-password-you-generated</span>
~$ <span class="userinput">sudo -u postgres createdb arvados_sso_production -E UTF8 -O arvados_sso -T template0</span>
</code></pre></notextile>

h2(#reconfigure_package). Reconfigure the package

Now that the @/etc/arvados/sso/application.yml@ and @/etc/arvados/sso/database.yml@ files have been updated, we need to reconfigure our installed package. Doing so will create and/or initialize the database and precompile the assets.

On a Debian-based system:

<notextile>
<pre><code>~$ <span class="userinput">sudo dpkg-reconfigure arvados-sso-server</span>
</code></pre>
</notextile>

On a Red Hat-based system, we need to reinstall the package instead:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum reinstall arvados-sso-server</span>
</code></pre>
</notextile>

h2(#client). Create arvados-server client

Use @rails console@ to create a @Client@ record that will be used by the Arvados API server.  The values of @app_id@ and @app_secret@ correspond to the values for @sso_app_id@ and @sso_app_secret@ in the "API server's SSO settings.":install-api-server.html#omniauth

<notextile>
<pre><code>~$ <span class="userinput">ruby -e 'puts rand(2**400).to_s(36)'</span>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
~$ <span class="userinput">cd /var/www/arvados-sso/current</span>
/var/www/arvados-sso/current$ <span class="userinput">RAILS_ENV=production bundle exec rails console</span>
:001 &gt; <span class="userinput">c = Client.new</span>
:002 &gt; <span class="userinput">c.name = "joshid"</span>
:003 &gt; <span class="userinput">c.app_id = "arvados-server"</span>
:004 &gt; <span class="userinput">c.app_secret = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>
:005 &gt; <span class="userinput">c.save!</span>
:006 &gt; <span class="userinput">quit</span>
</code></pre>
</notextile>

h2(#configure_web_server). Configure your web server

Edit the http section of your Nginx configuration to run the Passenger server and act as a frontend for it. You might add a block like the following, adding SSL and logging parameters to taste:

<notextile>
<pre><code>server {
  listen 127.0.0.1:8900;
  server_name localhost-sso;

  root   /var/www/arvados-sso/current/public;
  index  index.html;

  passenger_enabled on;
  # If you're not using RVM, comment out the line below.
  passenger_ruby /usr/local/rvm/wrappers/default/ruby;
}

upstream sso {
  server     127.0.0.1:8900  fail_timeout=10s;
}

proxy_http_version 1.1;

server {
  listen       <span class="userinput">[your public IP address]</span>:443 ssl;
  server_name  auth.<span class="userinput">your.domain</span>;

  ssl on;
  ssl_certificate     <span class="userinput">/YOUR/PATH/TO/cert.pem</span>;
  ssl_certificate_key <span class="userinput">/YOUR/PATH/TO/cert.key</span>;

  index  index.html;

  location / {
    proxy_pass            http://sso;
    proxy_redirect        off;
    proxy_connect_timeout 90s;
    proxy_read_timeout    300s;

    proxy_set_header      X-Forwarded-Proto https;
    proxy_set_header      Host $http_host;
    proxy_set_header      X-Real-IP $remote_addr;
    proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
</code></pre>
</notextile>

Finally, restart Nginx and your Arvados SSO server should be up and running. You can verify that by visiting the URL you configured your Nginx web server to listen on in the server section above (port 443). Read on if you want to configure your Arvados SSO server to use a different authentication backend.

h2(#authentication_methods). Authentication methods

Authentication methods are configured in @application.yml@.  Currently three authentication methods are supported: local accounts, LDAP, and Google+.  If neither Google+ nor LDAP are enabled, the SSO server defaults to local user accounts.   Only one authentication mechanism should be in use at a time.

h3(#local_accounts). Local account authentication

There are two configuration options for local accounts:

<pre>
  # If true, allow new creation of new accounts in the SSO server's internal
  # user database.
  allow_account_registration: false

  # If true, send an email confirmation before activating new accounts in the
  # SSO server's internal user database (otherwise users are activated immediately.)
  require_email_confirmation: false
</pre>

For more information about configuring backend support for sending email (required to send email confirmations) see "Configuring Action Mailer":http://guides.rubyonrails.org/configuring.html#configuring-action-mailer

If @allow_account_registration@ is false, you may manually create local accounts on the SSO server from the rails console:

<notextile>
<pre><code>~$ <span class="userinput">RAILS_ENV=production bundle exec rails console</span>
:001 &gt; <span class="userinput">user = User.new(:email =&gt; "test@example.com")</span>
:002 &gt; <span class="userinput">user.password = "passw0rd"</span>
:003 &gt; <span class="userinput">user.save!</span>
:004 &gt; <span class="userinput">quit</span>
</code></pre>
</notextile>

h3(#ldap). LDAP authentication

The following options are available to configure LDAP authentication.  Note that you must preserve the indentation of the fields listed under @use_ldap@.

<pre>
  use_ldap:
    title: Example LDAP
    host: ldap.example.com
    port: 636
    method: ssl
    base: "ou=Users, dc=example, dc=com"
    uid: uid
    email_domain: example.com
    #bind_dn: "some_user"
    #password: "some_password"
</pre>

table(table).
|_. Option|_. Description|
|title |Title displayed to the user on the login page|
|host  |LDAP server hostname|
|port  |LDAP server port|
|method|One of "plain", "ssl", "tls"|
|base  |Directory lookup base|
|uid   |User id field used for directory lookup|
|email_domain|Strip off specified email domain from login and perform lookup on bare username|
|bind_dn|If required by server, username to log with in before performing directory lookup|
|password|If required by server, password to log with before performing directory lookup|

h3(#google). Google+ authentication

In order to use Google+ authentication, you must use the <a href="https://console.developers.google.com" target="_blank">Google Developers Console</a> to create a set of client credentials.

# Go to the <a href="https://console.developers.google.com" target="_blank">Google Developers Console</a> and select or create a project; this will take you to the project page.
# On the sidebar, click on *APIs & auth* then select *APIs*.
## Search for *Contacts API* and click on *Enable API*.
## Search for *Google+ API* and click on *Enable API*.
# On the sidebar, click on *Credentials*; under *OAuth* click on *Create new Client ID* to bring up the *Create Client ID* dialog box.
# Under *Application type* select *Web application*.
# If the authorization origins are not displayed, clicking on *Create Client ID* will take you to *Consent screen* settings.
## On consent screen settings, enter the appropriate details and click on *Save*.
## This will return you to the *Create Client ID* dialog box.
# You must set the authorization origins.  Edit @sso.your-site.com@ to the appropriate hostname that you will use to access the SSO service:
## JavaScript origin should be @https://sso.your-site.com/@
## Redirect URI should be @https://sso.your-site.com/users/auth/google_oauth2/callback@
# Copy the values of *Client ID* and *Client secret* from the Google Developers Console into the Google section of @config/application.yml@, like this:

<notextile>
<pre><code>  # Google API tokens required for OAuth2 login.
  google_oauth2_client_id: <span class="userinput">"---YOUR---CLIENT---ID---HERE--"-</span>
  google_oauth2_client_secret: <span class="userinput">"---YOUR---CLIENT---SECRET---HERE--"-</span></code></pre></notextile>


