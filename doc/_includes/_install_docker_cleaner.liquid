h2. Configure the Docker cleaner

The arvados-docker-cleaner program removes least recently used Docker images as needed to keep disk usage below a configured limit.

{% include 'notebox_begin' %}
This also removes all containers as soon as they exit, as if they were run with @docker run --rm@. If you need to debug or inspect containers after they stop, temporarily stop arvados-docker-cleaner or run it with @--remove-stopped-containers never@.
{% include 'notebox_end' %}

Install runit to supervise the Docker cleaner daemon.  {% include 'install_runit' %}

Configure runit to run the image cleaner using a suitable quota for your compute nodes and workload:

<notextile>
<pre><code>~$ <span class="userinput">sudo mkdir -p /etc/sv</span>
~$ <span class="userinput">cd /etc/sv</span>
/etc/sv$ <span class="userinput">sudo mkdir arvados-docker-cleaner; cd arvados-docker-cleaner</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo mkdir log log/main</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo sh -c 'cat &gt;log/run' &lt;&lt;'EOF'
#!/bin/sh
exec svlogd -tt main
EOF</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo sh -c 'cat &gt;run' &lt;&lt;'EOF'
#!/bin/sh
if [ -d /opt/rh/python33 ]; then
  source scl_source enable python33
fi
exec python3 -m arvados_docker.cleaner --quota <b>50G</b>
EOF</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo chmod +x run log/run</span>
/etc/sv/arvados-docker-cleaner$ <span class="userinput">sudo ln -s "$(pwd)" /etc/service/</span>
</code></pre>
</notextile>

If you are using a different daemon supervisor, or if you want to test the daemon in a terminal window, an equivalent shell command to run arvados-docker-cleaner is:

<notextile>
<pre><code><span class="userinput">python3 -m arvados_docker.cleaner --quota <b>50G</b></span>
</code></pre>
</notextile>
