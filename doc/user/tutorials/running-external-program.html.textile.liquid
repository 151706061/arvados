---
layout: default
navsection: userguide
title: "Writing a pipeline"
...

This tutorial demonstrates how to construct a two stage pipeline template that uses the "bwa mem":http://bio-bwa.sourceforge.net/ tool to produce a "Sequence Alignment/Map (SAM)":https://samtools.github.io/ file, then uses the "Picard SortSam tool":http://picard.sourceforge.net/command-line-overview.shtml#SortSam to produce a BAM (Binary Alignment/Map) file.

{% include 'tutorial_expectations' %}

First, use @arv pipeline_template create@ to create a new empty template.  The @--format=uuid@ option will print out the unique identifier for the new template:

<notextile>
<pre><code>~$ <span class="userinput">arv --format=uuid pipeline_template create --pipeline-template '{}'</span>
qr1hi-p5p6p-wt1vdhkezgx7g2k
</span></code></pre>
</notextile>

Next, use @arv edit@ to edit the template.  This will open the template record in an interactive text editor (as specified by $EDITOR or $VISUAL, otherwise defaults to @nano@).  Replace the empty fields with the following content:

<notextile>{% code 'tutorial_bwa_sortsam_pipeline' as javascript %}</notextile>

* @"name"@ is a human-readable name for the pipeline.
* @"components"@ is a set of scripts or commands that make up the pipeline.  Each component is given an identifier (@"bwa-mem"@ and @"SortSam"@) in this example).
* @"repository"@, @"script_version"@, and @"script"@ indicate that we intend to use the external @"run-command"@ tool wrapper that is part of the Arvados.  These parameters are described in more detail in "Writing a script":tutorial-firstscript.html
* @"output_is_persistent"@ indicates whether the output of the component is considered valuable. If this value is false (or not given), the output will be treated as intermediate data which may be eventually deleted to reclaim disk space.
* @"runtime_constraints"@ describes runtime resource requirements for the component.
** @"docker_image"@ specifies the "Docker":https://www.docker.com/ runtime environment in which to run the job.  The Docker image @"arvados/jobs-java-bwa-samtools"@ supplied here has the Arvados SDK, Java runtime environment, bwa, and samtools installed.
* @"script_parameters"@ describes the component parameters.
** @"command"@ is the actual command line to invoke the @bwa@ and then @SortSam@.  The notation @$()@ denotes macro substitution commands evaluated by the run-command tool wrapper.
** @"stdout"@ indicates that the output of this command should be captured to a file.
** @$(node.cores)@ evaluates to the number of cores available on the compute node at time the command is run.
** @$(tmpdir)@ evaluates to the local path for temporary directory the command should use for scratch data.
** @$(reference_collection)@ evaluates to the script_parameter @"reference_collection"@
** @$(dir $(...))@ constructs a local path to a directory representing the supplied Arvados collection.
** @$(file $(...))@ constructs a local path to a given file within the supplied Arvados collection.
** @$(glob $(...))@ searches the specified path based on a file glob pattern and evalutes to the first result.
** @$(basename $(...))@ evaluates to the supplied path with leading path portion and trailing filename extensions stripped
** @"output_of"@ indicates that the @output@ of the @bwa-mem@ component should be used as the @"input"@ of @SortSam@.  Arvados uses these dependencies between components to automatically determine the correct order to run them.

When using @run-command@, the tool should write its output to the current working directory.  The output will be automatically uploaded to Keep when the job completes.

Your new pipeline template will appear on the Workbench "Pipeline&nbsp;templates":https://{{ site.arvados_workbench_host }}/pipeline_templates page.  You can run the "pipeline using Workbench":tutorial-pipeline-workbench.html.

For more information and examples for writing pipelines, see the "pipeline template reference":{{site.baseurl}}/api/schema/PipelineTemplate.html
