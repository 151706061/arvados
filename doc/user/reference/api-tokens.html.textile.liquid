---
layout: default
navsection: userguide
title: "Getting an API token"
...

The Arvados API token is a secret key that enables the @arv@ command line client to access Arvados with the proper permissions.

Access the Arvados Workbench using this link: "https://{{ site.arvados_workbench_host }}/":https://{{ site.arvados_workbench_host }}/  (Replace @{{ site.arvados_api_host }}@ with the hostname of your local Arvados instance if necessary.)

Open a shell on the system where you want to use the Arvados client. This may be your local workstation, or an Arvados virtual machine accessed with SSH ("Unix":{{site.baseurl}}/user/getting_started/ssh-access-unix.html#login or "Windows":{{site.baseurl}}/user/getting_started/ssh-access-windows.html#login).

Click on the link with your _email address_ in the upper right corner to access the user settings menu, and click on the menu item *Manage account* to go to the account management page. On the *Manage account* page, you will see the *Current Token* panel, which lists your current token and instructions to setup your environment.

h2. The easy way

For your convenience, the "Manage account" page on Workbench provides the "Current Token" panel that includes a command you may copy and paste directly into the shell.  It will look something like this:

bc. Paste the following lines at a shell prompt to set up the necessary environment for Arvados SDKs to authenticate to your account, you@example.com
HISTIGNORE=$HISTIGNORE:'export ARVADOS_API_TOKEN=*'
export ARVADOS_API_TOKEN=2jv9346o396exampledonotuseexampledonotuseexes7j1ld
export ARVADOS_API_HOST={{ site.arvados_api_host }}
export ARVADOS_API_HOST_INSECURE=true

* The @export@ command puts a local shell variable into the environment that will be inherited by child processes such as the @arv@ client.

h2. Setting the environment manually

Alternately, copy the value of *ARVADOS_API_TOKEN* from the _Current Token_ panel onto the clipboard.

<notextile>
<pre><code>$ <span class="userinput">export ARVADOS_API_HOST={{ site.arvados_api_host }}</span>
$ <span class="userinput">export ARVADOS_API_TOKEN=2jv9346o3966345u7ueuim7a1zaaoueo3w90tzq3gx0es7j1ld</span>
</code></pre>
</notextile>

* @ARVADOS_API_HOST@ tells @arv@ which host to connect to.
* @ARVADOS_API_TOKEN@ is the secret key used by the Arvados API server to authenticate access.  Its value is the text you copied from the *api_token* column on the Workbench.

If you are connecting to a development instance with a unverified/self-signed SSL certificate, set this variable to skip SSL validation:

<notextile>
<pre><code>$ <span class="userinput">export ARVADOS_API_HOST_INSECURE=1
</code></pre>
</notextile>

h2. settings.conf

Arvados tools will also look for the authentication information in @~/.config/arvados/settings.conf@. If you have already put the variables into the environment following the instructions above, you can use these commands to create an Arvados configuration file:

<notextile>
<pre><code>$ <span class="userinput">echo "ARVADOS_API_HOST=$ARVADOS_API_HOST" > ~/.config/arvados/settings.conf</span>
$ <span class="userinput">echo "ARVADOS_API_TOKEN=$ARVADOS_API_TOKEN" >> ~/.config/arvados/settings.conf</span>
</code></pre>
</notextile>

h2. .bashrc

Alternately, you may add the declarations of @ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ to the @~/.bashrc@ file on the system on which you intend to use the Arvados client.  If you have already put the variables into the environment following the instructions above, you can use these commands to append the environment variables to your @~/.bashrc@:

<notextile>
<pre><code>$ <span class="userinput">echo "export ARVADOS_API_HOST=$ARVADOS_API_HOST" >> ~/.bashrc</span>
$ <span class="userinput">echo "export ARVADOS_API_TOKEN=$ARVADOS_API_TOKEN" >> ~/.bashrc</span>
</code></pre>
</notextile>
